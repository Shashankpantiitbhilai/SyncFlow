services:
  postgres:
    image: postgres:15
    container_name: zenskar-postgres
    environment:
      POSTGRES_DB: zenskar_db
      POSTGRES_USER: zenskar_user
      POSTGRES_PASSWORD: zenskar_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zenskar_user -d zenskar_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zenskar-zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: zenskar-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: zenskar-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://zenskar_user:zenskar_pass@postgres:5432/zenskar_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: zenskar-worker
    environment:
      - DATABASE_URL=postgresql://zenskar_user:zenskar_pass@postgres:5432/zenskar_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/app

volumes:
  postgres_data:
